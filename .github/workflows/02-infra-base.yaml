################################################################################
# 02 – Deploy Infra-Base: cert-manager + ArgoCD + Sealed-Secrets               #
#                                                                              #
# ▸ Pode rodar manualmente (workflow_dispatch)                                 #
# ▸ Também é chamado via workflow_call pelo 01                                 #
################################################################################
name: 02-Deploy-Infra-Base

on:
  workflow_dispatch:
    inputs:
      criar_infra_base:
        description: "Executar deploy da infraestrutura base?"
        type: boolean
        default: false
        required: true

  workflow_call:
    inputs:
      criar_infra_base:
        type: boolean
        required: true

jobs:
  ##############################################################################
  # 1 ▸ Instala infra base                                                     #
  ##############################################################################
  deploy-infra:
    if: ${{ inputs.criar_infra_base }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: 🛠️ Dependências (Ansible, kubectl, ssh)
      run: |
        echo "::group::Instalando dependências"
        sudo apt-get update -y
        sudo apt-get install -y ansible sshpass openssh-client curl
        curl -sLO "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        echo "::endgroup::"

    - name: 🔐 Chave SSH
      run: |
        echo "::group::Configurando SSH"
        install -d -m 0700 ~/.ssh
        printf '%s' '${{ secrets.SSH_PRIVATE_KEY }}' > ~/.ssh/${{ vars.SSH_KEY_FILENAME }}
        chmod 600 ~/.ssh/${{ vars.SSH_KEY_FILENAME }}
        ssh-keyscan -H ${{ vars.VPS_HOSTNAME }} >> ~/.ssh/known_hosts
        echo "::endgroup::"

    - name: 🔍 Valida chave no runner
      run: |
        ssh-keygen -y -f ~/.ssh/${{ vars.SSH_KEY_FILENAME }} >/dev/null

    - name: 🚀 Playbook infra-base
      working-directory: ./ansible-hostinger
      run: |
        echo "::group::Executando playbook infra-base"
        ansible-playbook -i inventory.ini ansible-infra-base.yml
        echo "::endgroup::"

    - name: 📥 Copia kubeconfig
      run: |
        echo "::group::Copiando kubeconfig"
        scp -i ~/.ssh/${{ vars.SSH_KEY_FILENAME }} \
          ${{ vars.VPS_USER }}@${{ vars.VPS_HOSTNAME }}:/root/.kube/config kubeconfig
        echo "::endgroup::"

    - name: 📤 Publica kubeconfig artifact
      uses: actions/upload-artifact@v4
      with:
        name: kubeconfig-vps
        path: kubeconfig
        retention-days: 1

  ##############################################################################
  # 2 ▸ Gera & aplica SealedSecrets (workflow 03)                              #
  ##############################################################################
  generate-secrets:
    needs: deploy-infra
    strategy:
      matrix:
        app: [evolution-api, evolution-postgres, n8n-postgres, n8n]
    uses: ./.github/workflows/03-sealedsecrets.yaml
    with:
      app_name: ${{ matrix.app }}
    secrets: inherit
  ##############################################################################
  # 3 ▸ Primeiro deploy de aplicações (workflow 04)                            #
  ##############################################################################
  deploy-apps:
    needs: generate-secrets
    uses: ./.github/workflows/04-deploy-n8n.yaml
    secrets: inherit