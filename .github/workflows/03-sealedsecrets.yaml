name: 03-Generate-SealedSecrets

on:
  workflow_dispatch:
    inputs:
      app_list:
        description: "Aplicações alvo (ex.: evolution-api,evolution-postgres,n8n,n8n-postgres)"
        required: true
        type: string
  workflow_call:
    inputs:
      app_list:
        required: true
        type: string

jobs:
  seal-and-apply:
    runs-on: [self-hosted, kind]

    env:
      ##### SEGREDOS ORIGINAIS (já existem no Settings → Secrets) #####
      # evolution-api
      EVOLUTION_API_AUTHENTICATION_API_KEY:  ${{ secrets.EVOLUTION_API_AUTHENTICATION_API_KEY }}
      EVOLUTION_API_CACHE_REDIS_URI:         ${{ secrets.EVOLUTION_API_CACHE_REDIS_URI }}
      EVOLUTION_API_DATABASE_CONNECTION_URI: ${{ secrets.EVOLUTION_API_DATABASE_CONNECTION_URI }}

      # evolution-postgres
      EVOLUTION_POSTGRES_POSTGRES_DB:        ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_DB }}
      EVOLUTION_POSTGRES_POSTGRES_PASSWORD:  ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_PASSWORD }}
      EVOLUTION_POSTGRES_POSTGRES_USER:      ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_USER }}

      # n8n-postgres
      N8N_POSTGRES_POSTGRES_DB:              ${{ secrets.N8N_POSTGRES_POSTGRES_DB }}
      N8N_POSTGRES_POSTGRES_PASSWORD:        ${{ secrets.N8N_POSTGRES_POSTGRES_PASSWORD }}
      N8N_POSTGRES_POSTGRES_USER:            ${{ secrets.N8N_POSTGRES_POSTGRES_USER }}

      # n8n – encryption key (nome que existe no Settings)
      N8N_ENCRYPTION_KEY:                    ${{ secrets.NBN_ENCRYPTION_KEY }}

      ##### ALIAS SEM PREFIXO (nomes que o script usa) #####
      # evolution-api
      AUTHENTICATION_API_KEY:  ${{ secrets.EVOLUTION_API_AUTHENTICATION_API_KEY }}
      CACHE_REDIS_URI:         ${{ secrets.EVOLUTION_API_CACHE_REDIS_URI }}
      DATABASE_CONNECTION_URI: ${{ secrets.EVOLUTION_API_DATABASE_CONNECTION_URI }}

      # evolution-api / evolution-postgres / n8n-postgres
      POSTGRES_DB:       ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_PASSWORD }}
      POSTGRES_USER:     ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_USER }}

      # n8n (sem prefixo)
      DB_POSTGRESDB_DATABASE:  ${{ secrets.N8N_POSTGRES_POSTGRES_DB }}
      DB_POSTGRESDB_PASSWORD:  ${{ secrets.N8N_POSTGRES_POSTGRES_PASSWORD }}
      DB_POSTGRESDB_USER:      ${{ secrets.N8N_POSTGRES_POSTGRES_USER }}

    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Define KUBECONFIG
        run: echo "KUBECONFIG=/root/.kube/config" >> $GITHUB_ENV

      - name: 🛠️ Garante kubectl & kubeseal
        run: |
          command -v kubectl || {
            curl -sLO "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          }
          command -v kubeseal || {
            curl -sSL -o kubeseal \
              https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.6/kubeseal-linux-amd64
            chmod +x kubeseal && sudo mv kubeseal /usr/local/bin/kubeseal
          }

      - name: ⏳ Aguarda controller sealed-secrets
        run: |
          kubectl wait pod -n kube-system \
            -l app.kubernetes.io/name=sealed-secrets \
            --for=condition=Ready --timeout=60s
          sleep 5

      - name: 🏗️ Garante namespace
        run: kubectl get ns n8n-vps || kubectl create ns n8n-vps

      - name: 🔐 Gera & aplica SealedSecrets
        run: |
          chmod +x scripts/generate-sealedsecret-apps.sh
          scripts/generate-sealedsecret-apps.sh "${{ inputs.app_list }}" n8n-vps

          IFS=',' read -ra RAW <<< "${{ inputs.app_list }}"
          for raw in "${RAW[@]}"; do
            APP="$(echo "$raw" | xargs)"
            kubectl apply -f "apps/${APP}/templates/sealedsecret-${APP}.yaml"
          done
