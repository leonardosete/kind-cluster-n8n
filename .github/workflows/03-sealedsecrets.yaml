################################################################################
# 03 – Generate-SealedSecrets                                                  #
#                                                                              #
# ▸ Pode ser executado manualmente (workflow_dispatch)                         #
# ▸ É chamado pelo workflow 02 via workflow_call (reusable)                    #
################################################################################
name: 03-Generate-SealedSecrets

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "Aplicação alvo (n8n, n8n-postgres, evolution-api, …)"
        required: true
        type: string

  workflow_call:
    inputs:
      app_name:
        required: true
        type: string

jobs:
  ##############################################################################
  # 1 ▸ Gera o SealedSecret e aplica no cluster                                #
  ##############################################################################
  seal-and-apply:
    runs-on: ubuntu-latest

    # Todos os GitHub Secrets necessários ficam aqui em env:
    env:
      # evolution-api
      EVOLUTION_API_AUTHENTICATION_API_KEY: ${{ secrets.EVOLUTION_API_AUTHENTICATION_API_KEY }}
      EVOLUTION_API_CACHE_REDIS_URI:        ${{ secrets.EVOLUTION_API_CACHE_REDIS_URI }}
      EVOLUTION_API_DATABASE_CONNECTION_URI: ${{ secrets.EVOLUTION_API_DATABASE_CONNECTION_URI }}
      EVOLUTION_API_POSTGRES_DB:            ${{ secrets.EVOLUTION_API_POSTGRES_DB }}
      EVOLUTION_API_POSTGRES_PASSWORD:      ${{ secrets.EVOLUTION_API_POSTGRES_PASSWORD }}
      EVOLUTION_API_POSTGRES_USER:          ${{ secrets.EVOLUTION_API_POSTGRES_USER }}

      # evolution-postgres
      EVOLUTION_POSTGRES_POSTGRES_DB:       ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_DB }}
      EVOLUTION_POSTGRES_POSTGRES_PASSWORD: ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_PASSWORD }}
      EVOLUTION_POSTGRES_POSTGRES_USER:     ${{ secrets.EVOLUTION_POSTGRES_POSTGRES_USER }}

      # n8n-postgres
      N8N_POSTGRES_POSTGRES_DB:             ${{ secrets.N8N_POSTGRES_POSTGRES_DB }}
      N8N_POSTGRES_POSTGRES_PASSWORD:       ${{ secrets.N8N_POSTGRES_POSTGRES_PASSWORD }}
      N8N_POSTGRES_POSTGRES_USER:           ${{ secrets.N8N_POSTGRES_POSTGRES_USER }}

      # n8n (app)
      N8N_DB_POSTGRESDB_DATABASE:           ${{ secrets.N8N_DB_POSTGRESDB_DATABASE }}
      N8N_DB_POSTGRESDB_PASSWORD:           ${{ secrets.N8N_DB_POSTGRESDB_PASSWORD }}
      N8N_DB_POSTGRESDB_USER:               ${{ secrets.N8N_DB_POSTGRESDB_USER }}
      N8N_ENCRYPTION_KEY:                   ${{ secrets.N8N_ENCRYPTION_KEY }}

    steps:
    - uses: actions/checkout@v4

    # ──────────────────────────────────────────────────────────────────────────
    # 1 ▸ Baixa o kubeconfig publicado pelo workflow 02
    # ──────────────────────────────────────────────────────────────────────────
    - name: ⬇️  Baixa kubeconfig
      uses: actions/download-artifact@v4
      with:
        name: kubeconfig-vps
        path: .

    - name: 🔧 Define variável $KUBECONFIG
      run: echo "KUBECONFIG=${{ github.workspace }}/kubeconfig" >> $GITHUB_ENV

    # ──────────────────────────────────────────────────────────────────────────
    # 2 ▸ Instala kubectl e kubeseal
    # ──────────────────────────────────────────────────────────────────────────
    - name: 🛠️  Instala kubectl & kubeseal
      run: |
        echo "::group::Instalando kubectl & kubeseal"
        curl -sLO "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        curl -L "https://github.com/bitnami-labs/sealed-secrets/releases/latest/download/kubeseal-$(uname -s)-amd64" \
          -o kubeseal && chmod +x kubeseal && sudo mv kubeseal /usr/local/bin/
        echo "::endgroup::"

    # ──────────────────────────────────────────────────────────────────────────
    # 3 ▸ Constrói SECRET_KEYS para o script                                   
    # ──────────────────────────────────────────────────────────────────────────
    - name: 🔑 Define SECRET_KEYS
      run: |
        case "${{ inputs.app_name }}" in
          evolution-api)
            echo "SECRET_KEYS=EVOLUTION_API_AUTHENTICATION_API_KEY,EVOLUTION_API_CACHE_REDIS_URI,EVOLUTION_API_DATABASE_CONNECTION_URI,EVOLUTION_API_POSTGRES_DB,EVOLUTION_API_POSTGRES_PASSWORD,EVOLUTION_API_POSTGRES_USER" >> $GITHUB_ENV ;;
          evolution-postgres)
            echo "SECRET_KEYS=EVOLUTION_POSTGRES_POSTGRES_DB,EVOLUTION_POSTGRES_POSTGRES_PASSWORD,EVOLUTION_POSTGRES_POSTGRES_USER" >> $GITHUB_ENV ;;
          n8n-postgres)
            echo "SECRET_KEYS=N8N_POSTGRES_POSTGRES_DB,N8N_POSTGRES_POSTGRES_PASSWORD,N8N_POSTGRES_POSTGRES_USER" >> $GITHUB_ENV ;;
          n8n)
            echo "SECRET_KEYS=N8N_DB_POSTGRESDB_DATABASE,N8N_DB_POSTGRESDB_PASSWORD,N8N_DB_POSTGRESDB_USER,N8N_ENCRYPTION_KEY" >> $GITHUB_ENV ;;
          *) echo "❌ Aplicação não suportada"; exit 1 ;;
        esac

    # ──────────────────────────────────────────────────────────────────────────
    # 4 ▸ Gera e aplica o SealedSecret                                         #
    # ──────────────────────────────────────────────────────────────────────────

    - name: 🔐  Gera & aplica SealedSecret
      run: |
        echo "::group::Gerando SealedSecret"
        if [[ -z "${SECRET_KEYS:-}" ]]; then
          echo "❌ Variável SECRET_KEYS não foi definida. Verifique o app_name informado."
          exit 1
        fi
        chmod +x scripts/generate-sealedsecret-apps.sh
        scripts/generate-sealedsecret-apps.sh "${{ inputs.app_name }}" n8n-vps
        kubectl apply -f "apps/${{ inputs.app_name }}/templates/sealedsecret-${{ inputs.app_name }}.yaml"
        echo "::endgroup::"
