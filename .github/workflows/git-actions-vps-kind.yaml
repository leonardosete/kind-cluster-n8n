name: Deploy da VPS e Cluster KIND

on:
  workflow_dispatch:
    inputs:
      acionar_infra_base:
        description: "Deseja executar o deploy da infraestrutura base (cert-manager, ArgoCD)?"
        required: true
        default: false
        type: boolean

jobs:
  configure-vps-kind-cluster:
    runs-on: ubuntu-latest

    steps:
    - name: üì¶ Checkout do reposit√≥rio
      uses: actions/checkout@v3

    - name: üîß Instala depend√™ncias (Ansible, SSH, kubectl)
      run: |
        echo "::group::üõ†Ô∏è Instalando depend√™ncias"
        sudo apt-get update
        sudo apt-get install -y ansible sshpass openssh-client curl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        echo "::endgroup::"

    - name: üîê Configura chave SSH da VPS
      run: |
        echo "::group::üîê Adicionando chave SSH"
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ vars.SSH_KEY_FILENAME }}
        chmod 600 ~/.ssh/${{ vars.SSH_KEY_FILENAME }}
        ssh-keyscan -H ${{ vars.VPS_HOSTNAME }} >> ~/.ssh/known_hosts
        echo "‚úÖ Chave SSH configurada"
        echo "::endgroup::"

    - name: ‚öôÔ∏è Executa o playbook Ansible na VPS
      working-directory: ./ansible-hostinger
      run: |
        echo "::group::‚öôÔ∏è Playbook Ansible"
        echo "üì° Executando playbook: ansible-vps-kind.yaml"
        ansible-playbook -i inventory.ini ansible-vps-kind.yaml
        echo "::endgroup::"

    - name: üì• Baixa kubeconfig da VPS
      run: |
        echo "::group::üì• Baixando kubeconfig"
        mkdir -p ~/.kube
        scp -o StrictHostKeyChecking=no -i ~/.ssh/${{ vars.SSH_KEY_FILENAME }} \
          root@${{ vars.VPS_HOSTNAME }}:/root/.kube/config ~/.kube/config-vps
        chmod 600 ~/.kube/config-vps
        echo "‚úÖ kubeconfig salvo localmente"
        echo "::endgroup::"

    - name: üß© Ajusta kubeconfig com IP p√∫blico e TLS desabilitado
      env:
        VPS_IP: ${{ vars.VPS_IP }}
        VPS_CLUSTER_PORT: ${{ vars.VPS_CLUSTER_PORT }}
      run: |
        echo "::group::üß© Ajustando kubeconfig"
        export KUBECONFIG=~/.kube/config-vps

        kubectl config set-cluster kind-kind \
          --server="https://$VPS_IP:$VPS_CLUSTER_PORT" \
          --insecure-skip-tls-verify=true \
          --kubeconfig=$KUBECONFIG

        EXISTING_USER=$(kubectl config view --kubeconfig=$KUBECONFIG -o jsonpath='{.users[0].name}')

        kubectl config set-context kind-kind \
          --cluster=kind-kind \
          --user="$EXISTING_USER" \
          --kubeconfig=$KUBECONFIG

        echo "‚úÖ kubeconfig ajustado com IP e TLS desativado"
        echo "::endgroup::"

    - name: üì§ Publica kubeconfig como artifact
      uses: actions/upload-artifact@v4
      with:
        name: kubeconfig-vps
        path: ~/.kube/config-vps

    - name: ‚úÖ Mensagem final de conclus√£o
      run: |
        echo ""
        echo "====================== ‚úÖ SETUP CONCLU√çDO ======================"
        echo ""
        echo "üß∞ Ferramentas instaladas:"
        echo "  - Docker"
        echo "  - Docker Compose"
        echo "  - KIND (Kubernetes in Docker)"
        echo "  - kubectl"
        echo "  - Python + pip"
        echo "  - Helm"
        echo "  - Pacotes de monitoramento: htop, btop, ncdu, duf, etc."
        echo ""
        echo ""
        echo "üßæ MotD atualizado com comandos √∫teis ao acessar via SSH."
        echo ""
        echo "üì§ Acesse o step: 'üì§ Publica kubeconfig como artifact'"
        echo "L√° haver√° um link para baixar o kubeconfig como arquivo ZIP."
        echo ""
        echo "üì• Ap√≥s o download:"
        echo "   ‚Üí Extraia o arquivo ZIP"
        echo "   ‚Üí Mova o kubeconfig para:"
        echo "      ‚û§ \$HOME/.kube/config-vps"
        echo ""
        echo "üîß Depois execute no terminal local (macOS):"
        echo ""
        echo "   cd ~/kind-cluster-n8n"
        echo "   bash tools/fix-kubeconfig-context.sh"
        echo ""
        echo "‚ò∏Ô∏è  Ap√≥s isso, o cluster estar√° pronto para uso com:"
        echo "   ‚Üí kubectl get nodes"
        echo "   ‚Üí OpenLens, Lens ou qualquer outro dashboard"
        echo ""
        echo "üöÄ Tudo pronto para o deploy das aplica√ß√µes!"
        echo ""
        echo "==============================================================="

    - name: ‚ñ∂Ô∏è Aciona deploy da infraestrutura base (se solicitado)
      if: ${{ github.event.inputs.acionar_infra_base }}
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: "git-actions-infra-base.yaml"
        token: ${{ secrets.GITHUB_TOKEN }}
        inputs: |
          {
            "criar_infra_base": true
          }
