---
- name: Setup completo do servidor Debian
  hosts: vps_hostinger
  become: yes
  gather_facts: true
  collections:
    - community.general

  vars:
    kind_version: "v0.27.0"
    kind_binary_x86_64: "kind-linux-amd64"
    kind_binary_arm64: "kind-linux-arm64"
    helm_charts_dir: "{{ playbook_dir }}/../helm-charts"

  tasks:
    ###################################################################
    # Passo 1: Setup inicial (apt upgrade, pacotes, Docker, etc.)
    ###################################################################
    - name: Atualiza cache e realiza upgrade de pacotes
      apt:
        update_cache: yes
        upgrade: dist

    - name: Instala pacotes essenciais
      apt:
        name:
          - git
          - docker.io
          - python3
          - python3-pip
          - htop
          - ncdu
          - duf
          - btop
          - mlocate
          - bash-completion
          - openssh-client
          - ufw
          - rsync
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: yes

    - name: Habilita e inicia serviço Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Instala Docker Compose (binário oficial)
      get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system|lower }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Define MOTD personalizado
      copy:
        src: "{{ playbook_dir }}/vps-templates-base/motd"
        dest: /etc/motd
        owner: root
        group: root
        mode: '0644'

    - name: Configura ~/.bashrc personalizado (root)
      copy:
        src: "{{ playbook_dir }}/vps-templates-base/bashrc"
        dest: /root/.bashrc
        owner: root
        group: root
        mode: '0644'

    ###################################################################
    # Passo 2: Instalação do KIND
    ###################################################################
    - name: Seleciona binário do KIND de acordo com a arquitetura
      set_fact:
        kind_download_url: >-
          https://kind.sigs.k8s.io/dl/{{ kind_version }}/{{ (kind_binary_x86_64 if ansible_architecture == 'x86_64' else kind_binary_arm64) }}

    - name: Baixa binário do KIND
      get_url:
        url: "{{ kind_download_url }}"
        dest: /usr/local/bin/kind
        mode: '0755'

    - name: Exibe versão do KIND
      command: kind version
      register: kind_version_out
      ignore_errors: true

    - name: Debug - Versão do KIND
      debug:
        msg: "Versão do KIND: {{ kind_version_out.stdout | default('Não foi possível obter') }}"

    ###################################################################
    # Passo 3: Instala e configura kubectl
    ###################################################################
    - name: Adiciona chave GPG do repositório K8s
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        state: present

    - name: Configura repositório do Kubernetes
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
        state: present

    - name: Instala kubectl
      apt:
        name: kubectl
        state: present
        update_cache: yes

    - name: Exibe versão do kubectl (cliente)
      command: kubectl version --client
      register: kubectl_version_out
      ignore_errors: true

    - name: Debug - Versão do kubectl
      debug:
        msg: "kubectl: {{ kubectl_version_out.stdout | default('Não foi possível obter') }}"

    ###################################################################
    # Passo 4: Cria cluster KIND (portas 80, 443 e 6443->42885) + Ingress
    ###################################################################

    - name: Verifica se já existe algum cluster KIND
      command: kind get clusters
      register: clusters_list
      changed_when: false
      ignore_errors: true

    - name: Copia o kind-config.yaml para a VPS
      copy:
        src: "{{ playbook_dir }}/vps-templates-base/kind-config.yaml"
        dest: /root/kind-config.yaml
        owner: root
        group: root
        mode: '0644'

    - name: Cria o cluster KIND com portas 80, 443 e 6443->42885 (se não existir)
      command: kind create cluster --config=/root/kind-config.yaml
      when: "'kind' not in clusters_list.stdout"

    - name: Libera porta 42885 no firewall UFW
      ufw:
        rule: allow
        port: "{{ clusterPort }}"
        proto: tcp

    - name: Lista nodes do cluster KIND criado
      command: kubectl get nodes
      register: kind_nodes
      when: "'kind' not in clusters_list.stdout"

    - name: Debug - nós do cluster KIND
      debug:
        msg: "{{ kind_nodes.stdout }}"
      when: "'kind' not in clusters_list.stdout"

    ###################################################################
    # Passo 5: Configura o Ingress
    ###################################################################

    - name: Instala Ingress NGINX no KIND
      command: kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/deploy-ingress-nginx.yaml
      when: "'kind' not in clusters_list.stdout"

    - name: Aguarda o namespace ingress-nginx existir
      shell: kubectl get ns ingress-nginx
      register: ingress_ns_check
      retries: 10
      delay: 10
      until: ingress_ns_check.rc == 0

    - name: Aguarda o Ingress NGINX ficar pronto
      shell: |
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=180s
      register: ingress_wait_result
      retries: 3
      delay: 10
      until: ingress_wait_result.rc == 0

    ###################################################################
    # Passo 6: Instalação do Helm
    ###################################################################
    - name: Adiciona chave GPG do Helm
      apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present

    - name: Adiciona repositório do Helm
      apt_repository:
        repo: deb https://baltocdn.com/helm/stable/debian/ all main
        state: present

    - name: Atualiza cache de pacotes após adicionar Helm
      apt:
        update_cache: yes

    - name: Instala Helm
      apt:
        name: helm
        state: present

    - name: Verifica versão do Helm
      command: helm version
      register: helm_version_output
      ignore_errors: true

    - name: Debug - Versão do Helm
      debug:
        msg: "Helm instalado: {{ helm_version_output.stdout | default('Não foi possível obter a versão') }}"


    ###################################################################
    # Passo 7: Cria /root/helm-charts no server
    ###################################################################
    - name: Garante que a pasta /root/helm-charts existe no servidor
      file:
        path: /root/helm-charts
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Exibe status final da configuração
      debug:
        msg: "✅ VPS provisionada e cluster KIND inicializado com sucesso."

    ###################################################################
    # Passo 8: Instalação do kubeseal (v0.29.0 via binário oficial)
    ###################################################################
    - name: Baixa kubeseal v0.29.0 tar.gz
      get_url:
        url: https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.29.0/kubeseal-0.29.0-linux-amd64.tar.gz
        dest: /tmp/kubeseal.tar.gz

    - name: Extrai binário kubeseal do tar.gz
      shell: |
        tar -xvzf /tmp/kubeseal.tar.gz kubeseal
      args:
        chdir: /tmp
        creates: /tmp/kubeseal

    - name: Move kubeseal para /usr/local/bin
      copy:
        src: /tmp/kubeseal
        dest: /usr/local/bin/kubeseal
        mode: '0755'
        remote_src: yes

    - name: Verifica versão do kubeseal
      command: kubeseal --version
      register: kubeseal_version_out
      ignore_errors: true

    - name: Debug - Versão do kubeseal
      debug:
        msg: "kubeseal instalado: {{ kubeseal_version_out.stdout | default('Não foi possível obter a versão') }}"

    ###################################################################
    # Passo 9: Instala metrics-server com --kubelet-insecure-tls
    ###################################################################

    - name: Baixa manifest oficial do metrics-server
      get_url:
        url: https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        dest: /root/metrics-server.yaml
        mode: '0644'

    - name: Adiciona --kubelet-insecure-tls no container args do metrics-server
      replace:
        path: /root/metrics-server.yaml
        regexp: 'args:\s*\n\s*- --cert-dir=/tmp'
        replace: |
          args:
            - --cert-dir=/tmp
            - --kubelet-insecure-tls

    - name: Aplica manifest do metrics-server modificado
      command: kubectl apply -f /root/metrics-server.yaml

    - name: Aguarda metrics-server ficar pronto
      shell: |
        kubectl rollout status deployment metrics-server -n kube-system --timeout=120s
      register: metrics_server_rollout
      retries: 3
      delay: 10
      until: metrics_server_rollout.rc == 0

